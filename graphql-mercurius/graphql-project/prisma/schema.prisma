generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id         Int              @id @unique(map: "ui_articles_id") @default(autoincrement())
  title      String           @db.VarChar(255)
  content    String           @db.Text
  status     articles_status?
  user_id    Int?
  created_at DateTime?        @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at DateTime?        @default(dbgenerated("(now())")) @db.DateTime(0)
  users      users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_articles_user_id_users_id")

  @@index([user_id], map: "idx_articles_user_id")
}

model cart_items {
  id         Int       @id @unique(map: "ui_cart_items_id") @default(autoincrement())
  cart_id    Int?
  product_id Int?
  quantity   Int       @default(1)
  created_at DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  carts      carts?    @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_items_cart_id_carts_id")
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_items_product_id_products_id")

  @@index([cart_id], map: "idx_cart_items_cart_id")
  @@index([product_id], map: "idx_cart_items_product_id")
}

model carts {
  id         Int          @id @unique(map: "ui_carts_id") @default(autoincrement())
  user_id    Int?
  created_at DateTime?    @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at DateTime?    @default(dbgenerated("(now())")) @db.DateTime(0)
  cart_items cart_items[]
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_carts_user_id_users_id")

  @@index([user_id], map: "idx_carts_user_id")
}

model categories {
  id                 Int                  @id @unique(map: "ui_categories_id") @default(autoincrement())
  name               String               @unique(map: "name") @db.VarChar(255)
  created_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  product_categories product_categories[]
}

model customer_addresses {
  id            Int       @id @unique(map: "ui_customer_addresses_id") @default(autoincrement())
  customer_id   Int
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(255)
  state         String    @db.VarChar(255)
  postal_code   String    @db.VarChar(255)
  country       String    @db.VarChar(255)
  created_at    DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at    DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  customers     customers @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_addresses_customer_id_customers_id")

  @@index([customer_id], map: "idx_customer_addresses_customer_id")
}

model customers {
  id                 Int                  @id @unique(map: "ui_customers_id") @default(autoincrement())
  user_id            Int                  @unique(map: "ui_customers_user_id")
  address            String?              @db.VarChar(255)
  phone              String?              @db.VarChar(255)
  created_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  customer_addresses customer_addresses[]
  users              users                @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_customers_user_id_users_id")
}

model order_items {
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal   @db.Decimal(10, 0)
  created_at DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_order_id_orders_id")
  products   products  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_product_id_products_id")

  @@id([order_id, product_id])
  @@index([order_id], map: "idx_order_items_order_id")
  @@index([product_id], map: "idx_order_items_product_id")
}

model orders {
  id          Int           @id @unique(map: "ui_orders_id") @default(autoincrement())
  user_id     Int?
  status      orders_status @default(pending)
  total       Decimal       @db.Decimal(10, 0)
  created_at  DateTime?     @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at  DateTime?     @default(dbgenerated("(now())")) @db.DateTime(0)
  order_items order_items[]
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_user_id_users_id")
  payments    payments[]

  @@index([user_id], map: "idx_orders_user_id")
}

model payments {
  id             Int       @id @unique(map: "ui_payments_id") @default(autoincrement())
  order_id       Int?
  amount         Decimal   @db.Decimal(10, 0)
  payment_method String    @db.VarChar(255)
  payment_status String    @db.VarChar(255)
  created_at     DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at     DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  orders         orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_order_id_orders_id")

  @@index([order_id], map: "idx_payments_order_id")
}

model product_categories {
  product_id  Int
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_categories_category_id_categories_id")
  products    products   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_categories_product_id_products_id")

  @@id([product_id, category_id])
  @@index([category_id], map: "fk_product_categories_category_id_categories_id")
}

model products {
  id                 Int                  @id @unique(map: "ui_products_id") @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String?              @db.Text
  status             products_status?
  price              Decimal              @db.Decimal(10, 0)
  stock              Int                  @default(0)
  created_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at         DateTime?            @default(dbgenerated("(now())")) @db.DateTime(0)
  cart_items         cart_items[]
  order_items        order_items[]
  product_categories product_categories[]
}

model users {
  id              Int        @id @unique(map: "ui_users_id") @default(autoincrement())
  name            String     @db.VarChar(255)
  username        String     @unique(map: "ui_users_username") @db.VarChar(255)
  email           String     @unique(map: "email") @db.VarChar(255)
  hashed_password String     @db.VarChar(255)
  created_at      DateTime?  @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at      DateTime?  @default(dbgenerated("(now())")) @db.DateTime(0)
  articles        articles[]
  carts           carts[]
  customers       customers?
  orders          orders[]

  @@index([email], map: "idx_users_email")
}

enum orders_status {
  pending
  processing
  completed
  cancelled
}

enum products_status {
  active
  inactive
  deleted
  out_of_stock
  in_stock
  running_low
}

enum articles_status {
  draft
  published
  private
  deleted
}
